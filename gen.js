#!/usr/bin/env node
// -*- Mode: js; compile-command: "ninja"; -*-

const fs = require('fs');
const path = require('path');

// Load jsconfig.json (or tsconfig.json)
const configPath = path.resolve(__dirname, 'tsconfig.json');
const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));

// Extract compilerOptions
const opts = config.compilerOptions || {};
const args = [];

// Convert compilerOptions to CLI flags dynamically
for (const [key, value] of Object.entries(opts)) {
  const flag = `--${key}`;
  if (typeof value === 'boolean') {
    if (value) args.push(flag); // only push boolean flags if true
  } else if (Array.isArray(value)) {
    args.push(`${flag} ${value.join(',')}`);
  } else {
    args.push(`${flag} ${value}`);
  }
}

// Build the Ninja content
const ninja = `
# Auto-generated by gen.js

rule regen
  command = node gen.js
  restat = 1
  description = Re-generating Ninja File

rule ts
  command = npx tsc $in --outFile $out ${args.join(' ')}
  description = Compiling $in

rule cp
  command = cp $in $out
  description = Copying $in

build build.ninja: regen | gen.js tsconfig.json
build dist/content.js: ts content.ts | build.ninja
build dist/manifest.json: cp manifest.json
`.trim() + '\n';

// Write build.ninja
fs.writeFileSync(path.resolve(__dirname, 'build.ninja'), ninja);

console.log('build.ninja generated successfully.');
